This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-06T14:17:58.916Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
LICENSE
netlify.toml
package.json
postcss.config.js
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.js
src/App.test.js
src/components/AmazonProductCard.js
src/components/ArticleCard.js
src/components/Booking.js
src/components/FeaturedProducts.js
src/components/GLiNetConnectionChecker.js
src/components/LoadingCircle.js
src/components/Navigation.js
src/components/NewsletterSignupBanner.js
src/components/ServiceCard.js
src/components/SetmoreBooking.js
src/css/App.css
src/css/datepicker-custom.css
src/css/index.css
src/css/LoadingCircle.css
src/data/amazonProducts.json
src/data/blogArticles.json
src/helpers/routes.js
src/helpers/scrollToTop.js
src/hooks/useAnalyticsEventTracker.js
src/hooks/useGoogleAnalytics.js
src/index.js
src/pages/AmazonFinds.js
src/pages/ArticlePost.js
src/pages/Blog.js
src/pages/BlogPost.js
src/pages/FreeTools.js
src/pages/Home.js
src/pages/index.js
src/pages/IPLocationMap.js
src/pages/NotFound.js
src/pages/RouterDashboard.js
src/pages/Services.js
src/pages/SpeedTest.js
src/reportWebVitals.js
src/setupTests.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
.env

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: LICENSE
================
# StealthWork Proprietary Software License

## 1. Definitions

"Software" refers to the computer programs, associated media, printed materials, and electronic documentation created by StealthWork.

"Licensee" refers to the individual or entity that has been granted the right to use the Software under the terms of this License.

## 2. Grant of License

Subject to the terms and conditions of this License, StealthWork grants Licensee a non-exclusive, non-transferable, revocable license to use the Software for Licensee's internal business purposes only.

## 3. Restrictions

Licensee shall NOT:
a) Copy, modify, adapt, translate, reverse engineer, decompile, disassemble, or create derivative works based on the Software.
b) Distribute, sublicense, lease, rent, loan, or otherwise transfer the Software to any third party.
c) Remove, alter, or obscure any proprietary notices on the Software.
d) Use the Software for any illegal purpose or in any manner inconsistent with this License.

## 4. Ownership

StealthWork retains all right, title, and interest in and to the Software, including all intellectual property rights. This License does not grant Licensee any rights to patents, copyrights, trade secrets, trademarks, or any other rights in respect to the Software.

## 5. Confidentiality

Licensee acknowledges that the Software contains valuable trade secrets and proprietary information of StealthWork. Licensee agrees to maintain the confidentiality of the Software and not to disclose the Software to any third party without the prior written consent of StealthWork.

## 6. Termination

This License is effective until terminated. StealthWork may terminate this License at any time if Licensee breaches any of its terms. Upon termination, Licensee shall cease all use of the Software and destroy all copies of the Software in its possession.

## 7. Disclaimer of Warranty

THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. STEALTHWORK DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.

## 8. Limitation of Liability

IN NO EVENT SHALL STEALTHWORK BE LIABLE FOR ANY INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE SOFTWARE.

## 9. Governing Law and Jurisdiction

This License shall be governed by and construed in accordance with the laws of [Your Jurisdiction]. Any disputes arising under or in connection with this License shall be subject to the exclusive jurisdiction of the courts of [Your Jurisdiction].

## 10. Entire Agreement

This License constitutes the entire agreement between the parties with respect to the use of the Software and supersedes all prior or contemporaneous understandings regarding such subject matter.

By using the Software, Licensee acknowledges that it has read this License, understands it, and agrees to be bound by its terms and conditions.

Â© 2024 StealthWork. All Rights Reserved.

================
File: netlify.toml
================
[[redirects]]
from = "/*"
to = "/index.html"
status = 200

================
File: package.json
================
{
  "name": "vpn-consultation",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "autoprefixer": "^10.4.20",
    "date-fns-tz": "^3.1.3",
    "jsonp": "^0.2.1",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.441.0",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-datepicker": "^7.3.0",
    "react-dom": "^18.3.1",
    "react-ga": "^3.3.1",
    "react-ga4": "^2.1.0",
    "react-leaflet": "^4.2.1",
    "react-router-dom": "^6.26.2",
    "react-scripts": "^5.0.1",
    "tailwindcss": "^3.4.12",
    "web-vitals": "^2.1.4"
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="StealthWork - Your trusted partner for VPN solutions, software development, and website consultation. Stay secure, stay connected, stay ahead."
    />
    <meta
      name="keywords"
      content="VPN, Remote Access, Cybersecurity, Software Development, Website Consultation, Remote Work Solutions"
    />
    <meta name="author" content="StealthWork" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>StealthWork - Secure VPN & Remote Access Solutions</title>

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://www.stealthwork.app/" />
    <meta
      property="og:title"
      content="StealthWork - Secure VPN & Remote Access Solutions"
    />
    <meta
      property="og:description"
      content="Your trusted partner for VPN solutions, software development, and website consultation. Stay secure, stay connected, stay ahead."
    />
    <meta property="og:image" content="%PUBLIC_URL%/og-image.jpg" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://www.stealthwork.app/" />
    <meta
      property="twitter:title"
      content="StealthWork - Secure VPN & Remote Access Solutions"
    />
    <meta
      property="twitter:description"
      content="Your trusted partner for VPN solutions, software development, and website consultation. Stay secure, stay connected, stay ahead."
    />
    <meta property="twitter:image" content="%PUBLIC_URL%/twitter-image.jpg" />

    <!-- Favicon -->
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="%PUBLIC_URL%/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="%PUBLIC_URL%/favicon-16x16.png"
    />

    <!-- Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap"
      rel="stylesheet"
    />

    <!-- Canonical URL -->
    <link rel="canonical" href="https://www.stealthwork.app/" />

    <!-- Google Analytics Script -->
    <!-- <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-TXQZQRPYRP"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-TXQZQRPYRP");
    </script> -->

    <!-- Consent Banner -->

    <!-- <script
      type="text/javascript"
      data-cmp-ab="1"
      src="https://cdn.consentmanager.net/delivery/autoblocking/2ff1fe6c91d71.js"
      data-cmp-host="c.delivery.consentmanager.net"
      data-cmp-cdn="cdn.consentmanager.net"
      data-cmp-codesrc="16"
    ></script> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "StealthWork App",
  "name": "StealthWork",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.js
================
import React, { useEffect } from "react";
import useGoogleAnalytics from "./hooks/useGoogleAnalytics";
import Navigation from "./components/Navigation";
import ScrollToTop from "./helpers/scrollToTop";
import Routes from "./helpers/routes";
import ReactGA from "react-ga4";
import { useLocation } from "react-router-dom";

const App = () => {
  const location = useLocation();
  useGoogleAnalytics();
  ReactGA.initialize("G-TXQZQRPYRP");

  useEffect(() => {
    ReactGA.send({
      hitType: "pageview",
      page: location.pathname + location.search,
      title: location.search,
    });
    // ReactGA.pageview(location.pathname + location.search);
    console.log(location.pathname + location.search);
  }, [location]);

  return (
    <div>
      <ScrollToTop />
      <div className="min-h-screen flex flex-col bg-black">
        <Navigation />
        <main className="flex-grow">
          <Routes />
        </main>
        {/* <GLiNetConnectionChecker /> */}
        <footer className="bg-black p-4 text-center text-gray-500">
          Â© 2024 StealthWork. All rights reserved.
        </footer>
      </div>
    </div>
  );
};

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/AmazonProductCard.js
================
import React from "react";

const AmazonProductCard = ({ product }) => {
  // Destructure product properties for easier access
  const { name, imageUrl, productUrl } = product;

  return (
    <div
      className="bg-gray-900 rounded-lg shadow-md overflow-hidden max-w-sm"
      id="amazon-product-card"
    >
      {/* Product name container */}
      <div className="p-4" id="product-name-container">
        <h3
          className="text-lg font-semibold truncate"
          title={name}
          id="product-name"
        >
          {name}
        </h3>
      </div>

      {/* Product image container */}
      <div className="h-48 overflow-hidden" id="product-image-container">
        <img
          src={imageUrl}
          alt={name}
          className="w-full h-full object-contain transition-transform duration-300 hover:scale-105"
          id="product-image"
        />
      </div>

      {/* Buy now button container */}
      <div className="p-4" id="buy-button-container">
        <a
          href={productUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="block w-full bg-yellow-400 hover:bg-yellow-500 text-center py-2 px-4 rounded text-gray-800 font-semibold transition duration-300"
          id="buy-now-button"
        >
          Buy Now
        </a>
      </div>
    </div>
  );
};

export default AmazonProductCard;

================
File: src/components/ArticleCard.js
================
import { Link } from "react-router-dom";

const ArticleCard = ({ article }) => (
  <div className="bg-gray-900 rounded-lg overflow-hidden p-6">
    <div className="flex justify-between items-center mb-2">
      <h3 className="text-xl font-semibold mr-3">{article.title}</h3>
      <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded">
        {article.topic}
      </span>
    </div>
    <p className="text-gray-400 mb-4">
      {article.dateCreated} | {article.author}
    </p>
    <p className="text-gray-300 mb-4">{article.summary}</p>
    <Link
      to={`/articles/${article.urlName}`}
      className="text-blue-400 hover:text-blue-300 transition duration-300 flex items-center"
    >
      Read More <span className="ml-2">&rarr;</span>
    </Link>
  </div>
);

export default ArticleCard;

================
File: src/components/Booking.js
================
import React, { useState, useEffect } from "react";
import { Shield, Globe, DollarSign } from "lucide-react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { format, formatInTimeZone, toDate } from "date-fns-tz";
import { parseISO } from "date-fns";

const API_BASE_URL = "https://developer.setmore.com/api/v1";
const TIMEZONE = "America/New_York"; // Setmore's timezone
const LOCAL_TIMEZONE = "Asia/Tokyo"; // Your local timezone

const Booking = () => {
  const [currentPage, setCurrentPage] = useState("home");
  const [services, setServices] = useState([]);
  const [selectedService, setSelectedService] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [staffKey, setStaffKey] = useState(null);
  const [accessToken, setAccessToken] = useState("");
  const [authError, setAuthError] = useState(null);

  useEffect(() => {
    if (currentPage === "booking") {
      handleAuthentication();
    }
  }, [currentPage]);

  const handleAuthentication = async () => {
    try {
      const token = await fetchAccessToken();
      if (token) {
        setAccessToken(token);
        fetchServices(token);
        fetchStaff(token);
      }
    } catch (error) {
      console.error("Authentication error:", error);
      setAuthError("Failed to authenticate. Please try again later.");
    }
  };

  const fetchAccessToken = async () => {
    try {
      const response = await fetch(
        `${API_BASE_URL}/o/oauth2/token?refreshToken=YOUR_REFRESH_TOKEN`
      );
      const data = await response.json();
      if (data.response && data.data && data.data.token) {
        return data.data.token.access_token;
      } else if (data.error === "invalid_refresh_token") {
        throw new Error("Invalid refresh token. Please obtain a new one.");
      } else {
        throw new Error("Failed to fetch access token");
      }
    } catch (error) {
      console.error("Error fetching access token:", error);
      setAuthError(error.message);
      return null;
    }
  };

  const fetchServices = async (token) => {
    try {
      const response = await fetch(`${API_BASE_URL}/bookingapi/services`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await response.json();
      if (data.response && data.data && data.data.services) {
        setServices(data.data.services);
      } else {
        throw new Error("Failed to fetch services");
      }
    } catch (error) {
      console.error("Error fetching services:", error);
      setAuthError("Failed to fetch services. Please try again later.");
    }
  };

  const fetchStaff = async (token) => {
    try {
      const response = await fetch(`${API_BASE_URL}/bookingapi/staffs`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await response.json();
      if (
        data.response &&
        data.data &&
        data.data.staffs &&
        data.data.staffs.length > 0
      ) {
        setStaffKey(data.data.staffs[0].key);
      } else {
        throw new Error("Failed to fetch staff");
      }
    } catch (error) {
      console.error("Error fetching staff:", error);
      setAuthError(
        "Failed to fetch staff information. Please try again later."
      );
    }
  };

  const fetchAvailableSlots = async (serviceKey, date) => {
    if (!staffKey || !accessToken) return;

    const formattedDate = formatInTimeZone(date, TIMEZONE, "dd/MM/yyyy");
    try {
      const response = await fetch(`${API_BASE_URL}/bookingapi/slots`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify({
          staff_key: staffKey,
          service_key: serviceKey,
          selected_date: formattedDate,
          timezone: TIMEZONE,
        }),
      });
      const data = await response.json();
      if (data.response && data.data) {
        const localSlots = data.data.map((slot) => {
          const [hours, minutes] = slot.split(".");
          const slotDate = new Date(date);
          slotDate.setHours(parseInt(hours), parseInt(minutes));
          return formatInTimeZone(slotDate, LOCAL_TIMEZONE, "HH:mm");
        });
        setAvailableSlots(localSlots);
      } else {
        throw new Error("Failed to fetch available slots");
      }
    } catch (error) {
      console.error("Error fetching available slots:", error);
      setAuthError("Failed to fetch available slots. Please try again.");
    }
  };

  const createAppointment = async () => {
    if (
      !selectedService ||
      !selectedDate ||
      !selectedSlot ||
      !staffKey ||
      !accessToken
    )
      return;

    const [hours, minutes] = selectedSlot.split(":");
    const localDateTime = new Date(selectedDate);
    localDateTime.setHours(parseInt(hours), parseInt(minutes));

    const startTime = formatInTimeZone(
      localDateTime,
      TIMEZONE,
      "yyyy-MM-dd'T'HH:mm:ssXXX"
    );
    const endTime = formatInTimeZone(
      new Date(localDateTime.getTime() + selectedService.duration * 60000),
      TIMEZONE,
      "yyyy-MM-dd'T'HH:mm:ssXXX"
    );

    try {
      const response = await fetch(
        `${API_BASE_URL}/bookingapi/appointment/create`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify({
            staff_key: staffKey,
            service_key: selectedService.key,
            customer_key: "CUSTOMER_KEY",
            start_time: startTime,
            end_time: endTime,
            timezone: TIMEZONE,
          }),
        }
      );
      const data = await response.json();
      if (data.response && data.msg === "Appointment created successfully") {
        alert("Appointment booked successfully!");
        setSelectedService(null);
        setSelectedDate(null);
        setSelectedSlot(null);
      } else {
        throw new Error("Failed to create appointment");
      }
    } catch (error) {
      console.error("Error creating appointment:", error);
      setAuthError("Failed to book appointment. Please try again.");
    }
  };

  const handleServiceSelect = (service) => {
    setSelectedService(service);
    setSelectedDate(null);
    setAvailableSlots([]);
    setSelectedSlot(null);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setSelectedSlot(null);
    if (selectedService) {
      fetchAvailableSlots(selectedService.key, date);
    }
  };

  const isDateAvailable = (date) => {
    const day = formatInTimeZone(date, TIMEZONE, "i");
    return parseInt(day) >= 1 && parseInt(day) <= 4; // Monday is 1, Thursday is 4
  };

  return (
    <div className="p-8 pt-32 bg-gray-900 text-gray-100">
      <h2 className="text-4xl font-bold mb-8 text-center bg-gradient-to-r from-blue-400 to-purple-500 text-transparent bg-clip-text">
        Book a Consultation
      </h2>

      {authError ? (
        <div className="max-w-2xl mx-auto text-center">
          <p className="text-red-500 mb-4">{authError}</p>
          <button
            onClick={handleAuthentication}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300"
          >
            Try Again
          </button>
        </div>
      ) : !selectedService ? (
        <div className="max-w-2xl mx-auto">
          <h3 className="text-2xl mb-4">Select a Service:</h3>
          <div className="space-y-4">
            {services.map((service) => (
              <button
                key={service.key}
                onClick={() => handleServiceSelect(service)}
                className="w-full bg-gray-800 p-4 rounded-lg text-left hover:bg-gray-700 transition duration-300"
              >
                <h4 className="text-xl font-semibold">
                  {service.service_name}
                </h4>
                <p className="text-gray-400">
                  Duration: {service.duration} minutes | Cost: ${service.cost}
                </p>
              </button>
            ))}
          </div>
        </div>
      ) : (
        <div className="max-w-2xl mx-auto">
          <h3 className="text-2xl mb-4">Select a Date and Time:</h3>
          <p className="mb-4">Service: {selectedService.service_name}</p>
          <p className="mb-2 text-gray-400">
            Available days: Monday to Thursday
          </p>
          <DatePicker
            selected={selectedDate}
            onChange={handleDateSelect}
            filterDate={isDateAvailable}
            minDate={new Date()}
            inline
            className="bg-gray-800 text-white rounded"
            calendarClassName="bg-gray-800 border-gray-700"
            dayClassName={(date) =>
              isDateAvailable(date)
                ? "text-white hover:bg-blue-500"
                : "text-gray-500"
            }
          />
          {selectedDate && availableSlots.length > 0 && (
            <div className="mt-4">
              <h4 className="text-xl mb-2">Available Slots:</h4>
              <div className="grid grid-cols-3 gap-2">
                {availableSlots.map((slot) => (
                  <button
                    key={slot}
                    onClick={() => setSelectedSlot(slot)}
                    className={`p-2 rounded transition duration-300 ${
                      selectedSlot === slot
                        ? "bg-blue-600 text-white"
                        : "bg-blue-500 text-white hover:bg-blue-600"
                    }`}
                  >
                    {slot}
                  </button>
                ))}
              </div>
            </div>
          )}
          {selectedSlot && (
            <button
              onClick={createAppointment}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300"
            >
              Book Appointment
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default Booking;

================
File: src/components/FeaturedProducts.js
================
import React from "react";
import AmazonProductCard from "./AmazonProductCard"; // Ensure this path is correct

const FeaturedProducts = ({ amazonProducts }) => {
  const allProducts = amazonProducts?.products || [];
  const featuredProducts = allProducts.filter(product => product.featured === true);

  if (featuredProducts.length === 0) {
    return null; // Don't render the component if there are no featured products
  }

  return (
    <div
      id="featured-products-container"
      className="mt-8 max-w-6xl mx-auto px-4"
    >
      <h2 className="text-3xl font-bold mb-6">Featured Products</h2>
      <div
        id="featured-products-grid"
        className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6"
      >
        {featuredProducts.map((product) => (
          <AmazonProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default FeaturedProducts;

================
File: src/components/GLiNetConnectionChecker.js
================
import React, { useState, useEffect } from "react";

const GLiNetDashboard = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [routerData, setRouterData] = useState(null);
  const [token, setToken] = useState(null);
  const [error, setError] = useState(null);

  const loginToRouter = async () => {
    try {
      const response = await fetch('http://192.168.8.1/cgi-bin/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          password: 'jarabacoa809', // Enter your router password here
        }),
        mode: 'no-cors', 
      });
      
      if (!response.ok) throw new Error('Login failed');
      
      const data = await response.json();
      setToken(data.token);
      setIsAuthenticated(true);
    } catch (error) {
      setError('Failed to authenticate');
    }
  };

  const fetchRouterData = async () => {
    try {
      const response = await fetch('http://192.168.8.1/cgi-bin/api/status', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) throw new Error('Failed to fetch router data');
      
      const data = await response.json();
      setRouterData(data);
    } catch (error) {
      setError('Error fetching data');
    }
  };

  useEffect(() => {
    if (isAuthenticated) {
      fetchRouterData();
    }
  }, [isAuthenticated]);

  return (
    <div className="p-4 max-w-md mx-auto bg-gray-900 rounded-xl shadow-md">
      <h2 className="text-xl font-bold mb-4">GL.iNet Router Dashboard</h2>
      {!isAuthenticated ? (
        <button
          onClick={loginToRouter}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Login to Router
        </button>
      ) : error ? (
        <p className="text-red-600">{error}</p>
      ) : routerData ? (
        <div>
          <h3 className="text-lg font-bold">Router Status</h3>
          <p>Connected Devices: {routerData.connectedDevices}</p>
          <p>Download Speed: {routerData.downloadSpeed} Mbps</p>
          <p>Upload Speed: {routerData.uploadSpeed} Mbps</p>
        </div>
      ) : (
        <p>Loading router data...</p>
      )}
    </div>
  );
};

export default GLiNetDashboard;

================
File: src/components/LoadingCircle.js
================
import React from "react";
import "../css/LoadingCircle.css";

const LoadingCircle = () => (
  <div className="loading-container">
    <div className="loading-circle animate-pulse">
      <div className="relative z-10 text-white font-bold">Loading...</div>
    </div>
  </div>
);

export default LoadingCircle;

================
File: src/components/Navigation.js
================
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Menu, X } from "lucide-react";
import useAnalyticsEventTracker from "../hooks/useAnalyticsEventTracker";
import SetmoreBooking from "./SetmoreBooking";

const Navigation = () => {
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  const toggleMenu = () => setIsOpen(!isOpen);

  return (
    <>
      {/* Navigation bar */}
      <nav className="bg-black p-4 text-white fixed w-full z-50">
        <div className="max-w-6xl mx-auto flex justify-between items-center">
          <Link to="/" className="text-2xl font-bold">
            StealthWork
          </Link>
          <button onClick={toggleMenu} className="md:hidden">
            {isOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
          <div className="hidden md:flex space-x-8">
            {/* Desktop menu items */}
            <Link
              to="/"
              className="hover:text-gray-300 transition duration-300"
              onClick={useAnalyticsEventTracker("home")}
            >
              Home
            </Link>
            <Link
              to="/services"
              className="hover:text-gray-300 transition duration-300"
              onClick={useAnalyticsEventTracker("services")}
            >
              Services
            </Link>
            <Link
              to="/articles"
              className="hover:text-gray-300 transition duration-300"
              onClick={useAnalyticsEventTracker("articles")}
            >
              Articles
            </Link>
            <SetmoreBooking
              className="hover:text-gray-300 transition duration-300"
              content="Book Consultation"
              onClick={useAnalyticsEventTracker("book")}
            />
          </div>
        </div>
      </nav>

      {/* Mobile menu overlay */}
      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-[9999] flex items-center justify-center">
          <div className="text-white text-center">
            <button
              onClick={toggleMenu}
              className="absolute top-4 right-4 text-white text-2xl"
            >
              <X size={24} />
            </button>
            <nav>
              <ul className="space-y-6">
                <li>
                  <Link
                    to="/"
                    onClick={toggleMenu}
                    className="text-2xl hover:text-gray-300 transition duration-300"
                  >
                    Home
                  </Link>
                </li>
                <li>
                  <Link
                    to="/services"
                    onClick={toggleMenu}
                    className="text-2xl hover:text-gray-300 transition duration-300"
                  >
                    Services
                  </Link>
                </li>
                <li>
                  <Link
                    to="/articles"
                    onClick={toggleMenu}
                    className="text-2xl hover:text-gray-300 transition duration-300"
                  >
                    Articles
                  </Link>
                </li>
                <li>
                  <SetmoreBooking
                    className="text-2xl hover:text-gray-300 transition duration-300"
                    content="Book Consultation"
                  />
                </li>
              </ul>
            </nav>
          </div>
        </div>
      )}
    </>
  );
};

export default Navigation;

================
File: src/components/NewsletterSignupBanner.js
================
import React, { useState, useEffect } from "react";
import jsonp from "jsonp";
import { X } from "lucide-react";

const NewsletterSignupModal = () => {
  // State to control modal visibility
  const [isVisible, setIsVisible] = useState(false);
  // State to store email input
  const [email, setEmail] = useState("");

  useEffect(() => {
    // Check if the user has seen the modal before
    const hasSeenModal = localStorage.getItem("hasSeenNewsletterModal");
    if (!hasSeenModal) {
      // If not, show the modal after a short delay
      const timer = setTimeout(() => setIsVisible(true), 3000);
      return () => clearTimeout(timer);
    }
  }, []);

  // Function to handle form submission
  // Mailchimp custom form instead of their embedded form
  const handleSubmit = (e) => {
    e.preventDefault();
    jsonp(
      `${process.env.REACT_APP_MAILCHIMP_URL}&EMAIL=${email}`,
      { param: "c" },
      (_, data) => {
        console.log("data", data);
        const { msg } = data;

        alert(msg);
      }
    );
    closeModal();
  };

  // Function to close the modal
  const closeModal = () => {
    setIsVisible(false);
    localStorage.setItem("hasSeenNewsletterModal", "true");
  };

  if (!isVisible) return null;

  return (
    <div
      id="newsletter-signup-modal-overlay"
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
    >
      <div
        id="newsletter-signup-modal"
        className="bg-gray-900 text-white p-8 rounded-lg shadow-xl max-w-md w-full"
      >
        <div className="flex justify-between items-start mb-4">
          <h3 className="text-xl font-semibold">
            Stay Updated with StealthWork
          </h3>
          <button
            onClick={closeModal}
            className="text-gray-500 hover:text-gray-700 transition duration-300"
          >
            <X size={24} />
          </button>
        </div>
        <p className="text-sm text-white mb-6">
          Sign up for our newsletter to receive the latest articles and updates!
        </p>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="text-black w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition duration-300"
          >
            Subscribe
          </button>
        </form>
      </div>
    </div>
  );
};

export default NewsletterSignupModal;

================
File: src/components/ServiceCard.js
================
import React from "react";
import { Link } from "react-router-dom";

const ServiceCard = ({ icon: Icon, title, description, link }) => {
  return (
    <div
      className="bg-gray-900 p-6 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/50 flex flex-col h-full"
      id={`service-card-${title.toLowerCase().replace(/\s+/g, "-")}`}
    >
      {/* Card content wrapper */}
      <div className="flex-grow">
        {/* Icon */}
        <Icon className="w-12 h-12 text-blue-400 mb-4" />

        {/* Title */}
        <h3 className="text-xl font-semibold mb-2 text-gray-100">{title}</h3>

        {/* Description */}
        <p className="text-gray-300 mb-4">{description}</p>
      </div>

      {/* Button container */}
      <div className="mt-auto">
        {link && (
          <Link
            to={link}
            className="inline-block w-full text-center bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors duration-300 cursor-pointer"
            id={`service-card-link-${title.toLowerCase().replace(/\s+/g, "-")}`}
          >
            Try it now
          </Link>
        )}
      </div>
    </div>
  );
};

export default ServiceCard;

================
File: src/components/SetmoreBooking.js
================
import React, { useEffect, useState } from "react";

const SetmoreBooking = (props) => {
  const { content } = props;
  const [scriptLoaded, setScriptLoaded] = useState(false);

  useEffect(() => {
    // Function to load the Setmore script
    const loadSetmoreScript = () => {
      const script = document.createElement("script");
      script.src =
        "https://storage.googleapis.com/fullintegration-live/webComponentAppListing/Container/setmoreIframeLive.js";
      script.id = "setmore_script";
      script.async = true;
      script.onload = () => setScriptLoaded(true);
      document.body.appendChild(script);
    };

    // Load the script
    loadSetmoreScript();

    // Cleanup function to remove the script when component unmounts
    return () => {
      const script = document.getElementById("setmore_script");
      if (script) {
        document.body.removeChild(script);
      }
    };
  }, []);

  return (
    <div id="setmore-booking-container">
      {scriptLoaded && (
        <a
          {...props}
          id="Setmore_button_iframe"
          href="https://booking.setmore.com/scheduleappointment/03bc790a-7ad5-49a1-911c-13572acd0612"
          style={{ float: "none" }}
        >
          {content}
        </a>
      )}
    </div>
  );
};

export default SetmoreBooking;

================
File: src/css/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/css/datepicker-custom.css
================
.react-datepicker {
    background-color: #1f2937;
    border-color: #4b5563;
  }
  
  .react-datepicker__header {
    background-color: #111827;
    border-color: #4b5563;
  }
  
  .react-datepicker__current-month,
  .react-datepicker__day-name {
    color: #e5e7eb;
  }
  
  .react-datepicker__day {
    color: #e5e7eb;
  }
  
  .react-datepicker__day:hover {
    background-color: #3b82f6;
  }
  
  .react-datepicker__day--disabled {
    color: #6b7280;
  }
  
  .react-datepicker__day--selected {
    background-color: #3b82f6;
  }

================
File: src/css/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

/* banner */

.banner {
  position: relative;
  border-radius: 0.5rem;
  width: 100%;
  height: 60vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  background-color: #707070;
}
.banner::before,
.banner::after {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  right: -50%;
  bottom: -50%;
  opacity: 0.9;
  background-image: radial-gradient(circle at center center, #2f2f2f, #707070),
    repeating-radial-gradient(
      circle at center center,
      #2f2f2f,
      #2f2f2f,
      11px,
      transparent 22px,
      transparent 11px
    );
  background-blend-mode: multiply;
  animation: pulse 5s ease-in-out infinite;
}
/* .banner::after {
  animation-delay: -4s;
} */
.content {
  position: relative;
  z-index: 1;
  text-align: center;
  color: white;
  max-width: 800px;
  padding: 20px;
}
h1 {
  font-size: 3rem;
  margin-bottom: 1rem;
}
p {
  font-size: 1.2rem;
  margin-bottom: 2rem;
}
/* button {
  background-color: #4caf50;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 25px;
  transition: background-color 0.3s;
}
button:hover {
  background-color: #45a049;
}
@keyframes pulse {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.5);
  }
} */

================
File: src/css/LoadingCircle.css
================
.loading-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
  z-index: 9999; /* Ensure it's on top of other elements */
}
.loading-circle {
  position: relative;
  width: 200px;
  height: 200px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  border-radius: 50%;
  background-color: #707070;
}
.loading-circle::before,
.loading-circle::after {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  right: -50%;
  bottom: -50%;
  border-radius: 50%;
  opacity: 0.9;
  background-image: radial-gradient(circle at center center, #2f2f2f, #707070),
    repeating-radial-gradient(
      circle at center center,
      #2f2f2f,
      #2f2f2f,
      11px,
      transparent 22px,
      transparent 11px
    );
  background-blend-mode: multiply;
  animation: pulse 2s ease-in-out infinite;
}
.loading-circle::after {
  animation-delay: -1s;
}
@keyframes pulse {
  0%,
  100% {
    transform: scale(1);
    opacity: 0.5;
  }
  50% {
    transform: scale(1.1);
    opacity: 1;
  }
}

================
File: src/data/amazonProducts.json
================
{
  "products": [
    {
      "id": 1,
      "name": "GL.iNet GL-AXT1800 (Slate AX) Pocket-Sized Wi-Fi 6 Gigabit Travel Router, Extender/Repeater for Hotel&Public Network Storage, VPN Client&Server, OpenWrt, Adguard Home, USB 3.0, TF Card Slot",
      "imageUrl": "https://m.media-amazon.com/images/I/41cbb5DMUhL._AC_SX679_.jpg",
      "productUrl": "https://amzn.to/4gSqi31",
      "featured": true,
      "productType": "tech"
    },
    {
      "id": 2,
      "name": "GL.iNet GL-MT3000 (Beryl AX) Pocket-Sized Wi-Fi 6 Wireless Travel Gigabit Router | WiFi Router | OpenVPN, Wireguard, Connect to Public & Hotel Wi-Fi login Page, RV",
      "imageUrl": "https://m.media-amazon.com/images/I/41IiLQJghoL._AC_SX679_.jpg",
      "productUrl": "https://amzn.to/3TTq6qp",
      "featured": true,
      "productType": "tech"
    },
    {
      "id": 3,
      "name": "GL.iNet GL-AX1800(Flint) WiFi 6 Router -Dual Band Gigabit Wireless Internet Router | 5 x 1G Ethernet Ports | Up to 120 Devices | OpenVpn&WireGuard",
      "imageUrl": "https://m.media-amazon.com/images/I/41YJcGHPRAL._AC_SX679_.jpg",
      "productUrl": "https://amzn.to/4exxdgw",
      "featured": true,
      "productType": "tech"
    },
    {
      "id": 4,
      "name": "GL.iNet GL-MT6000(Flint 2) WiFi 6 Router | Gaming WiFi Router | 2 x 2.5G Multi-Gig Port+4 x 1G Ethernet Ports | Mass Device Connectivity | Rapid OpenVpn & WireGuard | 802.11ax | Long Range Coverage",
      "imageUrl": "https://m.media-amazon.com/images/I/51CImYagh1L._AC_SX679_.jpg",
      "productUrl": "https://amzn.to/3Y7Z0yg",
      "featured": true,
      "productType": "tech"
    },
    {
      "id": 5,
      "name": "Cracking the Coding Interview: 189 Programming Questions and Solutions (Cracking the Interview & Career)",
      "imageUrl": "https://m.media-amazon.com/images/I/61mIq2iJUXL._SY522_.jpg",
      "productUrl": "https://amzn.to/47RLHoM",
      "featured": false,
      "productType": "books"
    },
    {
      "id": 6,
      "name": "Cracking the PM Interview: How to Land a Product Manager Job in Technology (Cracking the Interview & Career)",
      "imageUrl": "https://m.media-amazon.com/images/I/61lpVd2HzXL._SY522_.jpg",
      "productUrl": "https://amzn.to/3TScpI6",
      "featured": false,
      "productType": "books"
    }
  ]
}

================
File: src/data/blogArticles.json
================
{
  "articles": [
    {
      "id": 1,
      "urlName": "advantages-of-vpns-for-remote-workers-2024",
      "title": "Advantages of VPNs for Remote Workers in 2024",
      "dateCreated": "2024-07-20",
      "author": "StealthWork Team",
      "topic": "VPN Security",
      "summary": "Explore how VPNs enhance security, enable secure remote access, and facilitate collaboration for remote workers in 2024.",
      "mainImage": "/images/vpn-remote-work.jpg",
      "content": [
        {
          "id": 1,
          "title": "What is a VPN and Why is it Essential for Remote Work?",
          "paragraph": "A Virtual Private Network (VPN) is a security tool designed to encrypt network traffic, making it a key component in maintaining a secure remote working environment. By acting as a protective barrier, a VPN ensures that sensitive information remains private and secure. Without a VPN, your data could be vulnerable to various cyber threats, particularly when using public networks."
        },
        {
          "id": 2,
          "title": "Benefits of VPNs for Remote Workers",
          "paragraph": "The surge in remote work highlights the importance of VPNs for securing connections to company networks and defending against cyber threats. Key benefits include enhanced cybersecurity, secure remote access, protection on public Wi-Fi, access control, and enhanced remote collaboration."
        },
        {
          "id": 3,
          "title": "Enhanced Cybersecurity",
          "paragraph": "A major advantage of using a VPN is its robust cybersecurity capabilities. By encrypting your internet connection, a VPN transforms your data into an unreadable format, making it difficult for hackers to access confidential company information. This encryption provides peace of mind, ensuring that sensitive data remains protected even when working remotely."
        },
        {
          "id": 4,
          "title": "Secure Remote Access",
          "paragraph": "A VPN establishes a secure connection between your device and your company's network, safeguarding communication from potential hackers. This allows employees to securely access internal resources, servers, and databases from anywhere in the world."
        },
        {
          "id": 5,
          "title": "Protection on Public Wi-Fi",
          "paragraph": "Public Wi-Fi networks, such as those found in coffee shops, libraries, or airports, can be risky. A VPN protects your data from potential cyber threats, such as 'evil twin' attacks, which are common on unsecured networks. Without a VPN, cybercriminals could exploit public Wi-Fi to steal sensitive information, leading to risks like financial fraud or identity theft."
        },
        {
          "id": 6,
          "title": "Site-to-Site vs. Remote Access VPN",
          "paragraph": "VPNs come in two main types: site-to-site and remote access. Site-to-Site VPN connects entire networks or branch offices, while Remote Access VPN allows individuals to securely access a corporate network from home or other locations."
        },
        {
          "id": 7,
          "title": "Full-Tunnel vs. Split-Tunnel VPN",
          "paragraph": "VPNs also vary in how they handle traffic. Full-Tunnel VPN routes all internet traffic through a secure VPN server, while Split-Tunnel VPN allows users to select which traffic goes through the VPN and which bypasses it."
        },
        {
          "id": 8,
          "title": "Conclusion",
          "paragraph": "In summary, VPNs are an indispensable tool for remote workers, offering enhanced security, remote access, and safe use of public networks, while also supporting effective remote collaboration. Understanding the different types of VPNs and their functionalities can help you choose the best solution for your needs."
        }
      ]
    },
    {
      "id": 2,
      "urlName": "understanding-remote-access",
      "title": "Understanding Remote Access: What It Is and How It Works",
      "dateCreated": "2024-08-25",
      "author": "StealthWork Team",
      "topic": "Remote Access",
      "summary": "Explore the concept of remote access, its applications, and how it's revolutionizing work, support, and collaboration across various industries.",

      "content": [
        {
          "id": 1,
          "title": "What is Remote Access?",
          "paragraph": "Remote access allows users to connect to and operate a network or device from a distant location. This technology enables individuals to manage files, provide technical support, oversee data, and collaborate effectively from anywhere, breaking the limitations of a physical office space. It is especially beneficial for employees who work from home or other remote locations."
        },
        {
          "id": 2,
          "title": "Applications of Remote Access",
          "paragraph": "Remote access technology is essential for various functions across different sectors: Telecommuting, IT Support, Education, Healthcare, Gaming, and Remote Monitoring and Management. It enables employees to work from home, IT professionals to troubleshoot issues remotely, students to access educational resources, doctors to consult patients remotely, gamers to access their games while traveling, and engineers to monitor industrial equipment from afar."
        },
        {
          "id": 3,
          "title": "How Remote Access Works",
          "paragraph": "Remote access enables users to connect to and control a computer or network from a remote location. The process involves setup and connection, secure authentication, enhanced security measures like multi-factor authentication, encryption of data transmission, and finally control and interaction with the remote device."
        },
        {
          "id": 4,
          "title": "Types of Remote Access",
          "paragraph": "There are three main types of remote access: Direct Remote Access Software (like RDP and SSH), Cloud-Enabled Remote Access Software (like Chrome Remote Desktop), and VPN (Virtual Private Network). Each type has its own advantages and is suited for different scenarios and security requirements."
        },
        {
          "id": 5,
          "title": "Remote Access Protocols",
          "paragraph": "Several protocols facilitate secure and efficient remote connections: Remote Desktop Protocol (RDP), Secure Shell (SSH), Internet Protocol Security (IPsec), OpenVPN, Layer 2 Tunneling Protocol (L2TP), and Hypertext Transfer Protocol Secure (HTTPS). These protocols ensure secure communication and data transfer between remote devices and networks."
        },
        {
          "id": 6,
          "title": "Conclusion",
          "paragraph": "Remote access technology has fundamentally changed how we work and interact with our devices. By understanding its mechanisms and applications, you can make the most of this powerful tool in various professional and personal contexts. Whether you're a remote worker, IT professional, or just someone who needs to access their home computer while away, remote access offers flexibility and efficiency in our increasingly connected world."
        }
      ]
    },
    {
      "id": 3,
      "urlName": "understanding-stripe-payment-processing",
      "title": "Understanding Stripe: A Comprehensive Guide to Payment Processing",
      "dateCreated": "2024-09-20",
      "author": "StealthWork Team",
      "topic": "Payment Processing",
      "summary": "Explore how Stripe works, what types of payments it accepts, and why it's a reliable tool for businesses looking to process online and in-person transactions.",
      "content": [
        {
          "id": 1,
          "title": "What is Stripe?",
          "paragraph": "Stripe is a payment processing service designed for merchants to accept various forms of payments, including credit and debit cards. Its payment platform, Stripe Payments, is particularly suited for businesses that primarily operate online, offering unique features that cater to e-commerce needs. While Stripe excels in online sales, it also supports in-person payments through its point-of-sale system, Stripe Terminal."
        },
        {
          "id": 2,
          "title": "What Payment Methods Does Stripe Support?",
          "paragraph": "With Stripe, businesses can accept a wide range of payment methods including credit and debit cards (Visa, Mastercard, American Express, Discover, JCB, Diners Club, and China UnionPay), mobile wallets (Apple Pay, Google Pay, and Samsung Pay), 'Buy now, pay later' services, and multiple currencies. For in-person transactions, Stripe offers Stripe Terminal, a hardware and software solution for point-of-sale payments."
        },
        {
          "id": 3,
          "title": "How Does Stripe Payment Processing Work?",
          "paragraph": "Stripe simplifies the payment process in six key steps: 1) Card information submission, 2) Encryption of card data, 3) Data sent to acquirer, 4) Card network transfer, 5) Approval or denial, and 6) Payment status confirmation. Once approved, the funds can be transferred from Stripe to the business's bank account, typically within two business days."
        },
        {
          "id": 4,
          "title": "Stripe Fees",
          "paragraph": "Stripe's fees depend on the type of transaction: 2.7% + 5 cents for in-person payments, 2.9% + 30 cents for online transactions, 3.4% + 30 cents for manually keyed transactions, and 4.4% + 30 cents for international card transactions."
        },
        {
          "id": 5,
          "title": "Is Stripe a Secure Payment Method?",
          "paragraph": "Yes, Stripe is a PCI compliance Level 1 service provider, adhering to the highest security standards in the payment industry. It undergoes annual compliance audits, regular security tests, and encrypts customers' credit card information. All online transactions processed through Stripe occur over HTTPS, ensuring a secure connection for sensitive payment data."
        },
        {
          "id": 6,
          "title": "How to Accept Payments with Stripe",
          "paragraph": "Getting started with Stripe is simple: 1) Create a Stripe Account, 2) Enter Business Details, and 3) Link Your Bank Account. While you can start accepting payments quickly, your first payout may take up to seven days, depending on the nature of your business."
        },
        {
          "id": 7,
          "title": "Conclusion",
          "paragraph": "Stripe is an excellent option for businesses looking for a robust, secure, and flexible payment processing platform. Whether you're an online retailer or a brick-and-mortar business, Stripe provides the tools needed to manage transactions efficiently."
        }
      ]
    }
  ]
}

================
File: src/helpers/routes.js
================
import React from "react";
import { Route, Routes as RoutesList } from "react-router-dom";

import {
  BlogPost,
  Services,
  IPLocationMap,
  Blog,
  SpeedTest,
  FreeTools,
  Home,
  NotFound,
  RouterDashboard,
  AmazonFinds,
} from "../pages/index";

const Routes = () => {
  return (
    <RoutesList>
      <Route path="/" element={<Home />} />
      <Route path="/services" element={<Services />} />
      <Route path="/articles" element={<Blog />} />
      <Route path="/articles/:urlName" element={<BlogPost />} />
      <Route path="/ip-location" element={<IPLocationMap />} />
      <Route path="/speedtest" element={<SpeedTest />} />
      <Route path="/tools" element={<FreeTools />} />
      <Route path="/amazon-finds" element={<AmazonFinds />} />
      <Route path="/glinet-router-connection" element={<RouterDashboard />} />
      <Route path="*" element={<NotFound />} />
    </RoutesList>
  );
};

export default Routes;

================
File: src/helpers/scrollToTop.js
================
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

function ScrollToTop() {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
    });
  }, [pathname]);

  return null;
}

export default ScrollToTop;

================
File: src/hooks/useAnalyticsEventTracker.js
================
import ReactGA from "react-ga4";

// const useAnalyticsEventTracker = (category = "Navigation category") => {
//   const eventTracker = (action = "test action", label = "test label") => {
//     ReactGA.event({ category, action, label });
//   };
//   return eventTracker;
// };

// export default useAnalyticsEventTracker;
const useAnalyticsEventTracker = (platform) => {
  ReactGA.event({
    category: "Navigation",
    action: "Click",
    label: platform,
  });
};

export default useAnalyticsEventTracker;

================
File: src/hooks/useGoogleAnalytics.js
================
// hooks/useGoogleAnalytics.js
import { useEffect } from "react";

const useGoogleAnalytics = () => {
  useEffect(() => {
    // Function to load Google Analytics script
    const loadGoogleAnalytics = () => {
      // Create script element
      const script = document.createElement("script");
      script.src = "https://www.googletagmanager.com/gtag/js?id=G-TXQZQRPYRP";
      script.async = true;

      // Append script to document head
      document.head.appendChild(script);

      // Initialize dataLayer and gtag function
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        window.dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-TXQZQRPYRP");
    };

    // Load Google Analytics
    loadGoogleAnalytics();

    // Clean up function
    return () => {
      // Remove the script when component unmounts
      const script = document.querySelector(
        'script[src="https://www.googletagmanager.com/gtag/js?id=G-TXQZQRPYRP"]'
      );
      if (script) {
        document.head.removeChild(script);
      }
    };
  }, []); // Empty dependency array ensures this runs once on mount
};

export default useGoogleAnalytics;

================
File: src/index.js
================
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter as Router } from "react-router-dom";
import "./css/index.css";
import App from "./App";
import "react-datepicker/dist/react-datepicker.css";
import "./css/datepicker-custom.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <Router>
    <App />
  </Router>
);

================
File: src/pages/AmazonFinds.js
================
import React, { useState, useMemo } from "react";
import AmazonProductCard from "../components/AmazonProductCard"; // Assuming you have this component
import amazonProducts from "../data/amazonProducts.json"; // Assuming you have this data file

const AmazonFinds = () => {
  // State for selected product type
  const [selectedProductType, setSelectedProductType] = useState("All");

  // Extract unique product types from amazon products
  const productTypes = useMemo(() => {
    const uniqueTypes = new Set(
      amazonProducts.products.map((product) => product.productType)
    );
    return ["All", ...uniqueTypes];
  }, []);

  // Filter products based on selected product type
  const filteredProducts = useMemo(() => {
    return selectedProductType === "All"
      ? amazonProducts.products
      : amazonProducts.products.filter(
          (product) => product.productType === selectedProductType
        );
  }, [selectedProductType]);

  return (
    <div
      id="amazon-finds-container"
      className="p-8 pt-32 bg-black text-white"
    >
      <h2 className="text-4xl font-bold mb-12 text-center">Amazon Finds</h2>
      <div className="max-w-6xl mx-auto mb-8">
        <div className="flex justify-center">
          {/* Product type filter */}
          <div className="flex items-center space-x-2">
            <label htmlFor="product-type-filter" className="text-gray-300">
              Filter by type:
            </label>
            <select
              id="product-type-filter"
              value={selectedProductType}
              onChange={(e) => setSelectedProductType(e.target.value)}
              className="bg-gray-800 text-white border border-gray-700 rounded px-3 py-2"
            >
              {productTypes.map((type) => (
                <option key={type} value={type}>
                  {type}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
      {/* Display filtered products */}
      <div
        id="product-grid"
        className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-6xl mx-auto"
      >
        {filteredProducts.map((product) => (
          <AmazonProductCard key={product.id} product={product} />
        ))}
      </div>
      {/* Display message if no products match the filter */}
      {filteredProducts.length === 0 && (
        <p className="text-center text-gray-400 mt-8">
          No products found for the selected type.
        </p>
      )}
    </div>
  );
};

export default AmazonFinds;

================
File: src/pages/ArticlePost.js
================
import React from "react";
import { useParams, Link } from "react-router-dom";
import blogArticles from "../data/blogArticles.json";

const BlogPost = () => {
  const { urlName } = useParams();
  const article = blogArticles.articles.find(
    (article) => article.urlName === urlName
  );

  if (!article) {
    return (
      <div className="p-8 pt-32 bg-black text-white">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold mb-4">Article Not Found</h1>
          <p>Sorry, the article you're looking for doesn't exist.</p>
          <Link
            to="/articles"
            className="text-blue-400 hover:text-blue-300 mt-4 inline-block"
          >
            Return to Articles
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 pt-32 bg-black text-white">
      <div className="max-w-3xl mx-auto">
        <Link
          to="/articles"
          className="text-blue-400 hover:text-blue-300 mb-4 inline-block"
        >
          &larr; Back to Articles
        </Link>
        <h1 className="text-4xl font-bold mb-4">{article.title}</h1>
        <div className="flex justify-between items-center mb-8">
          <p className="text-gray-400">
            {article.dateCreated} | {article.author}
          </p>
          <span className="bg-blue-500 text-white px-2 py-1 rounded">
            {article.topic}
          </span>
        </div>
        {article.content.map((item) => (
          <div key={item.id} className="mb-8">
            {item.title && (
              <h2 className="text-2xl font-semibold mb-4">{item.title}</h2>
            )}
            {item.paragraph && (
              <p className="text-gray-300">{item.paragraph}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default BlogPost;

================
File: src/pages/Blog.js
================
import React, { useState, useMemo } from "react";
import blogArticles from "../data/blogArticles.json";
import ArticleCard from "../components/ArticleCard"; // Assuming you have this component

const Blog = () => {
  // State for selected topic and sort order
  const [selectedTopic, setSelectedTopic] = useState("All");
  const [sortOrder, setSortOrder] = useState("newest");

  // Extract unique topics from blog articles
  const topics = useMemo(() => {
    const uniqueTopics = new Set(
      blogArticles.articles.map((article) => article.topic)
    );
    return ["All", ...uniqueTopics];
  }, []);

  // Filter and sort articles based on selected topic and sort order
  const filteredAndSortedArticles = useMemo(() => {
    let filtered =
      selectedTopic === "All"
        ? blogArticles.articles
        : blogArticles.articles.filter(
            (article) => article.topic === selectedTopic
          );

    return filtered.sort((a, b) => {
      const dateA = new Date(a.dateCreated);
      const dateB = new Date(b.dateCreated);
      return sortOrder === "newest" ? dateB - dateA : dateA - dateB;
    });
  }, [selectedTopic, sortOrder]);

  return (
    <div
      id="blog-container"
      className="p-8 pt-32 bg-black text-white"
    >
      <h2 className="text-4xl font-bold mb-12 text-center">Articles</h2>
      <div className="max-w-6xl mx-auto mb-8">
        <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
          {/* Topic filter */}
          <div className="flex items-center space-x-2">
            <label htmlFor="topic-filter" className="text-gray-300">
              Filter by topic:
            </label>
            <select
              id="topic-filter"
              value={selectedTopic}
              onChange={(e) => setSelectedTopic(e.target.value)}
              className="bg-gray-800 text-white border border-gray-700 rounded px-3 py-2"
            >
              {topics.map((topic) => (
                <option key={topic} value={topic}>
                  {topic}
                </option>
              ))}
            </select>
          </div>

          {/* Sort order selector */}
          <div className="flex items-center space-x-2">
            <label htmlFor="sort-order" className="text-gray-300">
              Sort by date:
            </label>
            <select
              id="sort-order"
              value={sortOrder}
              onChange={(e) => setSortOrder(e.target.value)}
              className="bg-gray-800 text-white border border-gray-700 rounded px-3 py-2"
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
            </select>
          </div>
        </div>
      </div>

      {/* Display filtered and sorted articles */}
      <div
        id="article-grid"
        className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto"
      >
        {filteredAndSortedArticles.map((article) => (
          <ArticleCard key={article.id} article={article} />
        ))}
      </div>

      {/* Display message if no articles match the filter */}
      {filteredAndSortedArticles.length === 0 && (
        <p className="text-center text-gray-400 mt-8">
          No articles found for the selected topic.
        </p>
      )}
    </div>
  );
};

export default Blog;

================
File: src/pages/BlogPost.js
================
import React from "react";
import { useParams, Link } from "react-router-dom";
import blogArticles from "../data/blogArticles.json";

const BlogPost = () => {
  const { urlName } = useParams();
  const article = blogArticles.articles.find(
    (article) => article.urlName === urlName
  );

  if (!article) {
    return (
      <div className="p-8 pt-32 bg-black text-white">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold mb-4">Article Not Found</h1>
          <p>Sorry, the article you're looking for doesn't exist.</p>
          <Link
            to="/articles"
            className="text-blue-400 hover:text-blue-300 mt-4 inline-block"
          >
            Return to Blog
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 pt-32 bg-black text-white">
      <div className="max-w-3xl mx-auto">
        <Link
          to="/articles"
          className="text-blue-400 hover:text-blue-300 mb-4 inline-block"
        >
          &larr; Back to Blog
        </Link>
        <h1 className="text-4xl font-bold mb-4">{article.title}</h1>
        <div className="flex justify-between items-center mb-8">
          <p className="text-gray-400">
            {article.dateCreated} | {article.author}
          </p>
          <span className="bg-blue-500 text-white px-2 py-1 rounded">
            {article.topic}
          </span>
        </div>
        {article.content.map((item) => (
          <div key={item.id} className="mb-8">
            {item.title && (
              <h2 className="text-2xl font-semibold mb-4">{item.title}</h2>
            )}
            {item.paragraph && (
              <p className="text-gray-300">{item.paragraph}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default BlogPost;

================
File: src/pages/FreeTools.js
================
import React from "react";
import { MapPin, Activity } from "lucide-react";
import ServiceCard from "../components/ServiceCard";

const FreeTools = () => (
  <div className="p-8 pt-32 bg-black text-white" id="free-tools-container">
    <h2 className="text-4xl font-bold mb-12 text-center" id="free-tools-title">
      Free Tools
    </h2>

    <section className="mb-16" id="free-tools-grid">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
        <ServiceCard
          icon={MapPin}
          title="IP Location"
          description="Get detailed information about your current IP address and geolocation."
          link="/ip-location"
        />
        <ServiceCard
          icon={Activity}
          title="Internet Speed Test"
          description="Measure your internet connection's speed and performance with our comprehensive test."
          link="/speedtest"
        />
      </div>
    </section>
  </div>
);

export default FreeTools;

================
File: src/pages/Home.js
================
import React from "react";
import blogArticles from "../data/blogArticles.json";
import ArticleCard from "../components/ArticleCard";
import amazonProducts from "../data/amazonProducts.json";
import FeaturedProducts from "../components/FeaturedProducts";
import SetmoreBooking from "../components/SetmoreBooking";
import NewsletterSignupBanner from "../components/NewsletterSignupBanner";

const Home = () => {
  const RecentArticles = () => {
    // Sort articles by date (newest first) and take the first two
    const sortedRecentArticles = blogArticles.articles
      .sort((a, b) => {
        const dateA = new Date(a.dateCreated);
        const dateB = new Date(b.dateCreated);
        return dateB - dateA; // Sort in descending order (newest first)
      })
      .slice(0, 2);

    return (
      <div id="recent-articles-container" className="mt-16 max-w-6xl mx-auto">
        <h2 className="text-3xl font-bold mb-8">Recent Articles</h2>
        <div
          id="recent-articles-grid"
          className="grid grid-cols-1 md:grid-cols-2 gap-8"
        >
          {sortedRecentArticles.map((article) => (
            <ArticleCard key={article.id} article={article} />
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="text-center p-8 pt-32 bg-black text-white">
      <div className="banner">
        <div className="content">
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-4 sm:mb-6">
            Welcome to StealthWork
          </h1>
          <p className="mb-8 sm:mb-12 text-base sm:text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">
            Your trusted partner for VPN solutions, software development, and
            website consultation. Stay secure, stay connected, stay ahead.
          </p>
          <SetmoreBooking
            className="bg-white text-black px-8 py-3 rounded-full text-lg font-semibold hover:bg-gray-200 transition duration-300"
            content="Book a Consultation"
          />
        </div>
      </div>

      <FeaturedProducts amazonProducts={amazonProducts} />
      <RecentArticles />
      <NewsletterSignupBanner />
    </div>
  );
};

export default Home;

================
File: src/pages/index.js
================
import NotFound from "./NotFound";
import BlogPost from "./BlogPost";
import Services from "./Services";
import IPLocationMap from "./IPLocationMap";
import Blog from "./Blog";
import SpeedTest from "./SpeedTest";
import FreeTools from "./FreeTools";
import Home from "./Home";
import RouterDashboard from "./RouterDashboard";
import AmazonFinds from "./AmazonFinds";

export {
  Home,
  NotFound,
  BlogPost,
  Services,
  IPLocationMap,
  Blog,
  SpeedTest,
  FreeTools,
  RouterDashboard,
  AmazonFinds,
};

================
File: src/pages/IPLocationMap.js
================
import React, { useState, useEffect } from "react";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faGlobe,
  faMapMarkerAlt,
  faServer,
  faBuilding,
  faNetworkWired,
  faDesktop,
  faExpandArrowsAlt,
  faCode,
  faCookie,
} from "@fortawesome/free-solid-svg-icons";
import LoadingCircle from "../components/LoadingCircle";

// Fix for default marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require("leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: require("leaflet/dist/images/marker-icon.png"),
  shadowUrl: require("leaflet/dist/images/marker-shadow.png"),
});

const InfoItem = ({ icon, label, value }) => (
  <div className="flex items-center mb-2">
    <FontAwesomeIcon icon={icon} className="text-blue-400 mr-2" />
    <span className="font-semibold mr-2">{label}:</span>
    <span>{value}</span>
  </div>
);

const IPLocationMap = () => {
  const [ipInfo, setIpInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch("https://ipapi.co/json/")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch IP information");
        }
        return response.json();
      })
      .then((data) => {
        setIpInfo(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return <LoadingCircle />;
  }

  if (error) {
    return (
      <div className="text-center p-8 pt-32 text-red-500">Error: {error}</div>
    );
  }

  return (
    <div className="p-8 pt-32 bg-black text-white">
      <div className="bg-gray-800 rounded-lg shadow-lg p-6 max-w-4xl mx-auto">
        <h1 className="text-2xl font-bold mb-6 text-blue-400">
          IP Address Details
        </h1>

        {ipInfo && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <InfoItem icon={faGlobe} label="IPv4" value={ipInfo.ip} />
              <InfoItem
                icon={faMapMarkerAlt}
                label="Location"
                value={`${ipInfo.city}, ${ipInfo.region}, ${ipInfo.country_name}`}
              />
              <InfoItem
                icon={faServer}
                label="Host Name"
                value={ipInfo.hostname || "Not available"}
              />
              <InfoItem
                icon={faBuilding}
                label="ISP"
                value={ipInfo.org || "Not available"}
              />
              <InfoItem
                icon={faNetworkWired}
                label="Proxy"
                value={ipInfo.proxy ? "Detected" : "Not Detected"}
              />
              <InfoItem
                icon={faDesktop}
                label="Platform"
                value={navigator.platform}
              />
            </div>
            <div>
              <InfoItem icon={faGlobe} label="IPv6" value="Not Detected" />
              <InfoItem
                icon={faGlobe}
                label="Browser"
                value={navigator.userAgent}
              />
              <InfoItem
                icon={faExpandArrowsAlt}
                label="Screen Size"
                value={`${window.screen.width}px X ${window.screen.height}px`}
              />
              <InfoItem icon={faCode} label="JavaScript" value="Enabled" />
              <InfoItem icon={faCookie} label="Cookie" value="Enabled" />
            </div>
          </div>
        )}
        {/* 
        <a
          href="#"
          className="text-blue-400 hover:text-blue-300 mb-6 inline-block"
        >
          Show more IP details
        </a> */}

        {ipInfo && (
          <div className="h-64 mb-6 inset-0 z-0">
            <MapContainer
              center={[ipInfo.latitude, ipInfo.longitude]}
              zoom={13}
              style={{ height: "100%", width: "100%" }}
            >
              <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              />
              <Marker position={[ipInfo.latitude, ipInfo.longitude]}>
                <Popup>The location used by your internet provider</Popup>
              </Marker>
            </MapContainer>
          </div>
        )}

        {/* add support for vpn subscriptions and any other paid service  */}
        {/* <div className="flex flex-col sm:flex-row gap-4">
          <button className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded flex-1">
            Hide my IP Address
          </button>
          <button className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded flex-1">
            Protect my Privacy with Proxy
          </button>
        </div> */}
      </div>
    </div>
  );
};

export default IPLocationMap;

================
File: src/pages/NotFound.js
================
import React from "react";
import { Link } from "react-router-dom";
import { Home, AlertTriangle } from "lucide-react";

const NotFound = () => {
  return (
    <div className="bg-black text-white flex items-center justify-center px-4 p-8 pt-32">
      <div className="text-center">
        <AlertTriangle className="w-20 h-20 text-yellow-400 mx-auto mb-6" />
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-4">404</h1>
        <h2 className="text-2xl sm:text-3xl md:text-4xl font-semibold mb-4">
          Page Not Found
        </h2>
        <p className="mb-8 text-lg text-gray-300 max-w-md mx-auto">
          Oops! The page you're looking for doesn't exist. It might have been
          moved or deleted.
        </p>
        <Link
          to="/"
          className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition duration-150 ease-in-out"
        >
          <Home className="w-5 h-5 mr-2" />
          Back to Home
        </Link>
      </div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/RouterDashboard.js
================
import React from "react";

const RouterDashboard = () => {
  return (
    <div className="p-8 pt-32 bg-black text-white">
      coming soon
    </div>
  );
};

export default RouterDashboard;

================
File: src/pages/Services.js
================
import React from "react";
import {
  Shield,
  Globe,
  DollarSign,
  Code,
  CreditCard,
  Search,
  MapPin,
  Activity,
} from "lucide-react";
import ServiceCard from "../components/ServiceCard";

const VpnServicesComponent = () => (
  <section className="mb-16">
    <h3 className="text-3xl font-bold mb-8 text-center">VPN Services</h3>
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
      <ServiceCard
        icon={Shield}
        title="VPN Router Setup"
        description="Secure your connection with our custom VPN router configurations."
      />
      <ServiceCard
        icon={Globe}
        title="Global Access"
        description="Bypass geo-restrictions and access your favorite content worldwide."
      />
      <ServiceCard
        icon={DollarSign}
        title="Cost-effective Solutions"
        description="Save on international data plans with our expert VPN setups."
      />
    </div>
  </section>
);

const FreeToolsComponent = () => (
  <section className="mb-16" id="free-tools-grid">
    <h3 className="text-3xl font-bold mb-8 text-center">Free Tools</h3>

    <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
      <ServiceCard
        icon={MapPin}
        title="IP Location"
        description="Get detailed information about your current IP address and geolocation."
        link="/ip-location"
      />
      <ServiceCard
        icon={Activity}
        title="Internet Speed Test"
        description="Measure your internet connection's speed and performance with our comprehensive test."
        link="/speedtest"
      />
    </div>
  </section>
);

const WebServicesComponent = () => (
  <section>
    <h3 className="text-3xl font-bold mb-8 text-center">Website Services</h3>
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
      <ServiceCard
        icon={Code}
        title="Custom Website Development"
        description="Create stunning, responsive websites tailored to your brand and needs."
      />
      <ServiceCard
        icon={CreditCard}
        title="Payment Integration"
        description="Seamlessly integrate secure payment gateways into your website."
      />
      <ServiceCard
        icon={Search}
        title="SEO Optimization"
        description="Improve your website's visibility and ranking in search engine results."
      />
    </div>
  </section>
);

const Services = () => {
  return (
    <div className="p-8 pt-32 bg-black text-white">
      <h2 className="text-4xl font-bold mb-12 text-center">Our Services</h2>
      <FreeToolsComponent />
      <VpnServicesComponent />
      <WebServicesComponent />
    </div>
  );
};

export default Services;

================
File: src/pages/SpeedTest.js
================
import React, { useState, useEffect } from "react";
import LoadingCircle from "../components/LoadingCircle";

const SpeedTest = () => {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 3000); // Simulating load time
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="p-8 pt-32 bg-black text-white ">
      {isLoading ? (
        <LoadingCircle />
      ) : (
        <div className="bg-gray-800 rounded-lg shadow-lg p-4 sm:p-6 w-full max-w-4xl mx-auto">
          <h1 className="text-xl sm:text-2xl font-bold mb-4 sm:mb-6 text-blue-400">
            Speed Test
          </h1>

          <div
            className="speed-test-container flex justify-center items-center"
            style={{ height: "400px" }}
          >
            <iframe
              src="//openspeedtest.com/Get-widget.php"
              className="w-full h-full border-2 border-blue-500 rounded-lg shadow-lg"
              style={{
                filter: "drop-shadow(0 4px 6px rgba(0, 208, 255, 0.5))",
              }}
              title="Speed Test"
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default SpeedTest;

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: tailwind.config.js
================
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};
